#include <iostream>
#include<vector>
#include<queue>
using namespace std;


vector<vector<int>> findPaths(const vector<vector<int>>& graph, int start, int end)
{
    vector<vector<int>> allPaths;
    vector<int> path;
    path.push_back(start);

    queue<vector<int>> q;
    q.push(path);

    while (!q.empty())
    {
        vector<bool> visited(graph.size(), false);
        visited[start] = true;
        vector<int> path = q.front();
        q.pop();

        int last = path[path.size()-1];
        if (last == end) allPaths.push_back(path);

        for (int i = 0; i < graph[last].size(); i++)
        {
            if (visited[graph[last][i]] == false)
            {
                vector<int> newPath = path;
                newPath.push_back(graph[last][i]);
                q.push(newPath);
                visited[graph[last][i]] = true;
            }
        }
    }
    return allPaths;
}

vector<int> findLongestPath(const vector<vector<int>>& graph, int start, int end)
{
    vector<int> longestPath(0);
    vector<int> path;
    path.push_back(start);

    queue<vector<int>> q;
    q.push(path);

    while (!q.empty())
    {
        vector<bool> visited(graph.size(), false);
        visited[start] = true;
        vector<int> path = q.front();
        q.pop();

        int last = path[path.size() - 1];
        if (last == end)
        {
            if (path.size() > longestPath.size())
                longestPath = path;
        }

        for (int i = 0; i < graph[last].size(); i++)
        {
            if (visited[graph[last][i]] == false)
            {
                vector<int> newPath = path;
                newPath.push_back(graph[last][i]);
                q.push(newPath);
                visited[graph[last][i]] = true;
            }
        }
    }
    return longestPath;
}

int componentsOfGraph(const vector<vector<int>>& graph, int start, vector<bool>& visited)
{
    queue<int> q;
    q.push(start);

    while (!q.empty())
    {
        int tmp = q.front();
        q.pop();
        for (int i = 0; i < graph[tmp].size(); i++)
        {
            if (visited[graph[tmp][i]] == false)
            {
                visited[graph[tmp][i]] = true;
                q.push(graph[tmp][i]);
            }
        }
    }
    return 1;
}

int main()
{
    vector<vector<int> > g;
    // number of vertices 
    int v = 6;
    g.resize(v+1);

    // construct a graph 
    g[1].push_back(2);
    g[2].push_back(3);
    g[2].push_back(4);
    g[4].push_back(5); 
    g[5].push_back(6);
    g[6].push_back(3);
    g[4].push_back(3);
    

    int src = 1, dst = 3;
    cout << "path from src " << src
        << " to dst " << dst << " are \n";

    vector<vector<int>> allPaths = findPaths(g, 1, 3);
    for (int i = 0; i < allPaths.size(); i++)
    {
        for (int j = 0; j < allPaths[i].size(); j++)
        {
            cout << allPaths[i][j] << " ";
        }
        cout << endl;
    }


}
